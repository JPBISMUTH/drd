package cz.stechy.drd.controller;

import cz.stechy.drd.model.entity.Vulnerability;
import cz.stechy.screens.BaseController;
import cz.stechy.screens.Bundle;
import java.net.URL;
import java.util.Arrays;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.FlowPane;

/**
 * Kontroler pro nastavení zranitelnosti nestvůry / postavy
 */
public class VulnerabilityController extends BaseController implements Initializable {

    // region Constants

    public static final String VULNERABILITY = "vulnerability";

    // endregion

    // region Variables

    // region FXML

    @FXML
    private FlowPane container;

    // endregion

    private final VulnerabilityCheckbox[] checkboxes;

    private int vulnerability = 0;
    // endregion

    // region Constructors

    public VulnerabilityController() {
        this.checkboxes = Vulnerability.VALUES.entrySet().stream()
            .map(entry -> new VulnerabilityCheckbox(entry.getKey(), entry.getValue()))
            .toArray(VulnerabilityCheckbox[]::new);
    }

    // endregion

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        container.getChildren().setAll(checkboxes);
        Arrays.stream(this.checkboxes).forEach(checkbox -> checkbox.setOnAction(checkboxHandler));
    }

    @Override
    protected void onCreate(Bundle bundle) {
        this.vulnerability = bundle.getInt(VULNERABILITY);
        Arrays.stream(checkboxes).forEach(checkbox -> checkbox.tryCheck(vulnerability));
    }

    @Override
    protected void onResume() {
        setScreenSize(200, 150);
    }

    // region Button handlers

    @FXML
    private void handleFinish(ActionEvent actionEvent) {
        Bundle bundle = new Bundle();
        bundle.putInt(VULNERABILITY, vulnerability);
        setResult(RESULT_SUCCESS);
        finish(bundle);
    }

    // endregion

    private static final class VulnerabilityCheckbox extends CheckBox {

        private final int value;

        public VulnerabilityCheckbox(final String label, final int value) {
            this.value = value;
            setText(label);
            setPadding(new Insets(2.0));
        }

        public void tryCheck(int value) {
            if ((this.value & value) == this.value) {
                this.setSelected(true);
            }
        }
    }

    private final EventHandler<ActionEvent> checkboxHandler = event -> {
        VulnerabilityCheckbox checkbox = ((VulnerabilityCheckbox) event.getSource());
        if (checkbox.isSelected()) {
            vulnerability += checkbox.value;
        } else {
            vulnerability -= checkbox.value;
        }
    };
}
